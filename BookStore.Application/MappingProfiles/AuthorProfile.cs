using AutoMapper;
using bookStore.Application.Models;
using bookStore.Domain.Entities;
using BookStore.Application.Models;
using BookStore.Domain.Entities;
using System.Globalization;

namespace BookStore.Application.MappingProfiles
{
    public class AuthorProfile : Profile
    {
        public AuthorProfile()
        {
            CreateMap<AddressModel, Address>()
                .ForMember(dest => dest.AddressId, opt => opt.Ignore())
                .ReverseMap();

            CreateMap<AddressStatusModel, AddressStatus>()
                .ForMember(dest => dest.StatusId, opt => opt.Ignore())
                .ReverseMap();

            CreateMap<AuthorModel, Author>()
                .ForMember(dest => dest.AuthorId, opt => opt.Ignore())
                .ReverseMap(); // Ignore the Id property, since it will be generated by the database


            // Mapping for Author entity
            CreateMap<AuthorModel, Author>()
                .ForMember(dest => dest.AuthorId, opt => opt.Ignore())
                .ReverseMap(); // Ignore the Id property, since it will be generated by the database

            // Mapping for Book entity
            CreateMap<BookModel, Book>()
                .ForMember(dest => dest.BookId, opt => opt.Ignore())
                .ReverseMap();

            //CreateMap<BookModel, Book>()
            //    .ForMember(dest => dest.BookId, opt => opt.Ignore())
            //    .ForMember(dest => dest.PublicationDate, opt => opt.MapFrom(src => DateTime.ParseExact(src.PublicationDate, "yyyy-MM-dd", CultureInfo.InvariantCulture)))
            //    .ReverseMap()
            //    .ForMember(dest => dest.PublicationDate, opt => opt.MapFrom(src => src.PublicationDate.ToString("yyyy-MM-dd")));

            // Mapping for BookAuthor entity
            CreateMap<BookAuthorModel, BookAuthor>()
                .ForMember(dest => dest.Book_Id, opt => opt.Ignore())
                .ReverseMap();

            CreateMap<BookModel, Book>()
                .ForMember(dest => dest.BookId, opt => opt.Ignore())
                .ReverseMap();

            //CreateMap<Book, BookModel>()
            //    .ForMember(dest => dest.LanguageName, opt => opt.MapFrom(src => src.Language.Name))
            //    .ForMember(dest => dest.PublisherName, opt => opt.MapFrom(src => src.Publisher.Name))
            //    .ForMember(dest => dest.AuthorNames, opt => opt.MapFrom(src => string.Join(", ", src.Authors.Select(a => a.Name))))
            //    .ReverseMap();


            CreateMap<BookLanguageModel, BookLanguage>()
                .ForMember(dest => dest.LanguageId, opt => opt.Ignore())
                .ReverseMap();

            CreateMap<CountryModel, Country>()
                .ForMember(dest => dest.CountryId, opt => opt.Ignore())
                .ReverseMap();

            CreateMap<CustomerModel, Customer>()
                .ForMember(dest => dest.CustomerId, opt => opt.Ignore())
                .ReverseMap();

            CreateMap<CustomerAddressModel, CustomerAddress>()
                .ForMember(dest => dest.CustomerId, opt => opt.Ignore())
                .ReverseMap();

            CreateMap<CustOrderModel, CustOrder>()
                .ForMember(dest => dest.OrderId, opt => opt.Ignore())
                .ReverseMap();

            CreateMap<OrderHistoryModel, OrderHistory>()
                .ForMember(dest => dest.HistoryId, opt => opt.Ignore())
                .ReverseMap();

            CreateMap<OrderLineModel, OrderLine>()
                .ForMember(dest => dest.LineId, opt => opt.Ignore())
                .ReverseMap();

            CreateMap<OrderStatusModel, OrderStatus>()
                .ForMember(dest => dest.StatusId, opt => opt.Ignore())
                .ReverseMap();

            CreateMap<PublisherModel, Publisher>()
                .ForMember(dest => dest.PublisherId, opt => opt.Ignore())
                .ReverseMap();

            CreateMap<ShippingMethodModel, ShippingMethod>()
                .ForMember(dest => dest.MethodId, opt => opt.Ignore())
                .ReverseMap();
        }
    }
}
